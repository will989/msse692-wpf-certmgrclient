//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CertificateManagerClient.CalculatorService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Microsoft.ServiceModel.Samples", ConfigurationName="CalculatorService.ICalculator")]
    public interface ICalculator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/ListCertificatesInStore", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/ListCertificatesInStoreResponse" +
            "")]
        System.Security.Cryptography.X509Certificates.X509Certificate2[] ListCertificatesInStore(string storeName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/ListCertificatesInRemoteStore", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/ListCertificatesInRemoteStoreRe" +
            "sponse")]
        System.Security.Cryptography.X509Certificates.X509Certificate2[] ListCertificatesInRemoteStore(string storeName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, string serverName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/ListExpiringCertificatesInStore" +
            "", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/ListExpiringCertificatesInStore" +
            "Response")]
        System.Security.Cryptography.X509Certificates.X509Certificate2[] ListExpiringCertificatesInStore(string storeName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, int days);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/ListExpiringCertificatesInRemot" +
            "eStore", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/ListExpiringCertificatesInRemot" +
            "eStoreResponse")]
        System.Security.Cryptography.X509Certificates.X509Certificate2[] ListExpiringCertificatesInRemoteStore(string storeName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, int days, string serverName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/PrintCertificateInfo", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/PrintCertificateInfoResponse")]
        void PrintCertificateInfo(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/EnumCertificatesByStoreName", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/EnumCertificatesByStoreNameResp" +
            "onse")]
        void EnumCertificatesByStoreName(System.Security.Cryptography.X509Certificates.StoreName name, System.Security.Cryptography.X509Certificates.StoreLocation location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/EnumCertificates", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/EnumCertificatesResponse")]
        void EnumCertificates(string name, System.Security.Cryptography.X509Certificates.StoreLocation location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/InstallCertificateLocal", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/InstallCertificateLocalResponse" +
            "")]
        bool InstallCertificateLocal(string storeName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.X509Certificate2 certificate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/InstallCertificateRemote", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/InstallCertificateRemoteRespons" +
            "e")]
        bool InstallCertificateRemote(string storeName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, string serverName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/DeleteCertificate", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/DeleteCertificateResponse")]
        bool DeleteCertificate(string certificateName, string storeName, System.Security.Cryptography.X509Certificates.StoreLocation location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/DeleteCertificateRemote", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/DeleteCertificateRemoteResponse" +
            "")]
        bool DeleteCertificateRemote(string certificateName, string storeName, System.Security.Cryptography.X509Certificates.StoreLocation location, string serverName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/DeleteCertificateByThumbprint", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/DeleteCertificateByThumbprintRe" +
            "sponse")]
        bool DeleteCertificateByThumbprint(string certificateName, string thumbprint, string storeName, System.Security.Cryptography.X509Certificates.StoreLocation location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/DeleteCertificateByThumbprintRe" +
            "mote", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/DeleteCertificateByThumbprintRe" +
            "moteResponse")]
        bool DeleteCertificateByThumbprintRemote(string thumbprint, string storeName, System.Security.Cryptography.X509Certificates.StoreLocation location, string serverName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/RemoveCertificateLocal", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/RemoveCertificateLocalResponse")]
        bool RemoveCertificateLocal(string storeName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.X509Certificate2 certificate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/CompareCertificatesInStore", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/CompareCertificatesInStoreRespo" +
            "nse")]
        System.Security.Cryptography.X509Certificates.X509Certificate2[] CompareCertificatesInStore(string storeName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, string serverA, string serverB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/GetData", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/GetDataResponse")]
        string GetData(int value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorChannel : CertificateManagerClient.CalculatorService.ICalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorClient : System.ServiceModel.ClientBase<CertificateManagerClient.CalculatorService.ICalculator>, CertificateManagerClient.CalculatorService.ICalculator {
        
        public CalculatorClient() {
        }
        
        public CalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Security.Cryptography.X509Certificates.X509Certificate2[] ListCertificatesInStore(string storeName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation) {
            return base.Channel.ListCertificatesInStore(storeName, storeLocation);
        }
        
        public System.Security.Cryptography.X509Certificates.X509Certificate2[] ListCertificatesInRemoteStore(string storeName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, string serverName) {
            return base.Channel.ListCertificatesInRemoteStore(storeName, storeLocation, serverName);
        }
        
        public System.Security.Cryptography.X509Certificates.X509Certificate2[] ListExpiringCertificatesInStore(string storeName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, int days) {
            return base.Channel.ListExpiringCertificatesInStore(storeName, storeLocation, days);
        }
        
        public System.Security.Cryptography.X509Certificates.X509Certificate2[] ListExpiringCertificatesInRemoteStore(string storeName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, int days, string serverName) {
            return base.Channel.ListExpiringCertificatesInRemoteStore(storeName, storeLocation, days, serverName);
        }
        
        public void PrintCertificateInfo(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) {
            base.Channel.PrintCertificateInfo(certificate);
        }
        
        public void EnumCertificatesByStoreName(System.Security.Cryptography.X509Certificates.StoreName name, System.Security.Cryptography.X509Certificates.StoreLocation location) {
            base.Channel.EnumCertificatesByStoreName(name, location);
        }
        
        public void EnumCertificates(string name, System.Security.Cryptography.X509Certificates.StoreLocation location) {
            base.Channel.EnumCertificates(name, location);
        }
        
        public bool InstallCertificateLocal(string storeName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) {
            return base.Channel.InstallCertificateLocal(storeName, storeLocation, certificate);
        }
        
        public bool InstallCertificateRemote(string storeName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, string serverName) {
            return base.Channel.InstallCertificateRemote(storeName, storeLocation, certificate, serverName);
        }
        
        public bool DeleteCertificate(string certificateName, string storeName, System.Security.Cryptography.X509Certificates.StoreLocation location) {
            return base.Channel.DeleteCertificate(certificateName, storeName, location);
        }
        
        public bool DeleteCertificateRemote(string certificateName, string storeName, System.Security.Cryptography.X509Certificates.StoreLocation location, string serverName) {
            return base.Channel.DeleteCertificateRemote(certificateName, storeName, location, serverName);
        }
        
        public bool DeleteCertificateByThumbprint(string certificateName, string thumbprint, string storeName, System.Security.Cryptography.X509Certificates.StoreLocation location) {
            return base.Channel.DeleteCertificateByThumbprint(certificateName, thumbprint, storeName, location);
        }
        
        public bool DeleteCertificateByThumbprintRemote(string thumbprint, string storeName, System.Security.Cryptography.X509Certificates.StoreLocation location, string serverName) {
            return base.Channel.DeleteCertificateByThumbprintRemote(thumbprint, storeName, location, serverName);
        }
        
        public bool RemoveCertificateLocal(string storeName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) {
            return base.Channel.RemoveCertificateLocal(storeName, storeLocation, certificate);
        }
        
        public System.Security.Cryptography.X509Certificates.X509Certificate2[] CompareCertificatesInStore(string storeName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, string serverA, string serverB) {
            return base.Channel.CompareCertificatesInStore(storeName, storeLocation, serverA, serverB);
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
    }
}
